package ch03.함수정의와호출

/**
 * 문제점
 * 기존 자바 코드와 코틀린 코드를 자연스럽게 통합하는 것은 코틀린의 핵심 목표 중 하나다.
 * 완전히 코틀린으로만 이뤄진 프로젝트조차도 JDK, 프레임워크 등의 자바 라이브러리를 기반으로 만들어진다.
 * 코틀린으로 직접 변환할 수 없거나 미처 변환하지 않은 기존 자바 코드를 처리하려면 어떻게 해야할까?
 * 확장함수를 사용하면 기존의 자바코드를 유지하면서도 코틀린이 제공하는 여러 편리한 기능을 사용할 수 있다.
 *
 * 학습목표
 * 확장함수에 대해 알아본다.
 *
 * 확장함수
 * 클래스에 새로운 메서드를 추가하는 것과 같다.
 * 직접 작성한 코드도 아니고, 소스코드를 소유한 것도 아니지만, 원하는 메서드를 클래스에 추가할 수 있다.
 * 확장함수에서 일반 메서드의 본문에서 this를 사용할 때와 마찬가지로 this를 쓸 수 있다.
 * 또한, 일반 메서드와 마찬가지로 확장 함수 본문에서도 this를 생략할 수 있다.
 * 확장함수 내부에서는 일반적인 인스턴스 메서드의 내부에서와 마찬가지로 수신 객체의 메서드나 프로퍼티를 바로 사용할 수 있다.
 * 하지만 확장함수 안에서는 private, protected 멤버를 사용할 수 없다.
 * 사실 Java로 보면 확장 함수는 수신 객체를 첫 번째 인자로 받는 정적 메서드다. (확장함수호출.java 참고)
 * 정적 메서드는 오버라이딩이 불가능하므로 확장함수 또한 오버라이딩이 불가능하다.
 */

// receiver type: 함수가 확장할 클래스의 이름 - String
// receiver object: 확장 함수가 호출되는 대상이 되는 값(객체) - this
fun String.lastChar(): Char = this.get(this.length - 1)

fun main() {
    // receiver type: String
    // receiver object: "Kotlin"
    println("Kotlin".lastChar())
}
